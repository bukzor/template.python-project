# Based on Simon Willison's dynamic template pattern:
# https://simonwillison.net/2021/Aug/28/dynamic-github-repository-templates/
# https://github.com/simonw/python-lib-template-repository
name: Setup project from copier template

on:
  push:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  setup-repo:
    if: ${{ !github.event.repository.is_template }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install copier
        run: pip install copier

      - uses: actions/github-script@v7
        id: fetch-repo-and-user-details
        with:
          script: |
            const query = `query($owner:String!, $name:String!) {
              repository(owner:$owner, name:$name) {
                name
                description
                owner {
                  login
                  ... on User {
                    name
                    email
                  }
                  ... on Organization {
                    name
                    email
                  }
                }
              }
            }`;
            const variables = {
              owner: context.repo.owner,
              name: context.repo.repo
            }
            const result = await github.graphql(query, variables)
            console.log(result)
            return result

      - name: Generate project from template
        env:
          INFO: ${{ steps.fetch-repo-and-user-details.outputs.result }}
        run: |
          export REPO_NAME=$(echo $INFO | jq -r '.repository.name')
          export DESCRIPTION=$(echo $INFO | jq -r '.repository.description // ""')
          export OWNER_LOGIN=$(echo $INFO | jq -r '.repository.owner.login')
          export OWNER_NAME=$(echo $INFO | jq -r '.repository.owner.name // .repository.owner.login')
          export OWNER_EMAIL=$(echo $INFO | jq -r '.repository.owner.email // ""')

          # Call our copier script
          ./lib/ci/copier \
            --no-input \
            --name "$REPO_NAME" \
            --description "$DESCRIPTION" \
            --author-name "$OWNER_NAME" \
            --author-email "$OWNER_EMAIL" \
            --github-username "$OWNER_LOGIN" \
            --destination /tmp/generated

          # Move generated content to root directory of repo
          rsync -av /tmp/generated/ ./ --exclude='.git'

          # Delete the setup workflow since it has served its purpose
          rm .github/workflows/setup.yml

      - name: Force push new repo contents
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Initial project structure from copier template"
          push_options: --force
